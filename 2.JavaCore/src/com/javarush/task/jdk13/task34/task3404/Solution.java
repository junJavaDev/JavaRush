package com.javarush.task.jdk13.task34.task3404;

/* 
Ханойские башни
*/

public class Solution {
    public static void main(String[] args) {
        int numRings = 3;
        moveRing('A', 'B', 'C', numRings);
    }

    public static void moveRing(char a, char b, char c, int numRings) {
            /*
            Всё решение строится на таком принципе:

            Перекладывание стека из 5 дисков — это:
                1. Перекладывание стека из 4х дисков на независимую ось
                2. Перекладывание 5-го диска на нужную нам ось
                3. Перекладывание стека из 4х дисков на нужную нам ось

            В свою очередь перекладывание стека из 4 дисков — это:
                1. Перекладывание стека из 3х дисков на независимую ось
                2. Перекладывание 4-го диска на нужную нам ось
                3. Перекладывание стека из 3х дисков на нужную нам ось

            По итогу, независимо от количества дисков, остаётся два варианта:
                1. Один диск (он же последний) сразу перекладывается на нужную ось, является условием для выхода из рекурсии
                2. Два диска (глобально - нижний диск и стек над ним) перекладываются в следующей последовательности:
                    a. Переложить верхний диск (глобально - стек) на независимую ось;
                    b. Переложить нижний диск на нужную ось;
                    c. Переложить верхний диск (глобально - стек) на нужную ось;
                   Чтобы переложить не один диск, а весь стек, нужно рекурсивно вызвать метод, соответственно
                   пункты a и c должны быть рекурсивными методами, а пункт b - не рекурсивным.
            */

            if (numRings > 1) {

                //Перекладывание СТЕКА на независимую ось (стек на оси A, независимая ось C) from A to C
                moveRing(a, c, b, numRings - 1);

                //Перекладывание НИЖНЕГО ДИСКА (ДИСК ПОД СТЕКОМ) на нужную ось (диск на оси A, нужная ось B) from A to B
                printMove(a, b);

                //Перекладывание СТЕКА на нужную ось (стек на оси C, нужная ось B) from C to B
                moveRing(c, b, a, numRings - 1);

            } else if (numRings == 1){ //УСЛОВИЕ ВЫХОДА ИЗ РЕКУРСИИ

                //Перекладывание ПОСЛЕДНЕГО ДИСКА на нужную ось, ТРИГГЕР ДЛЯ РЕКУРСИВНОГО ПОДЪЁМА (диск на оси A, нужная ось B) from A to B
                printMove(a, b);
            }
    }

    private static void printMove(char a, char b) {
        System.out.printf("from %c to %c\n", a, b);
    }
}